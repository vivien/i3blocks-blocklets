#!/usr/bin/env python3
# Copyright 2020 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


import os
import sys
import json
from enum import IntEnum
from gi.repository import Gio, GLib


class DeviceType(IntEnum):
    """See https://upower.freedesktop.org/docs/Device.html#Device:Type"""
    BATTERY = 2


class DeviceState(IntEnum):
    """See https://upower.freedesktop.org/docs/Device.html#Device:State"""
    CHARGING = 1
    FULLY_CHARGED = 4


class DeviceWarningLevel(IntEnum):
    """See https://upower.freedesktop.org/docs/Device.html#Device:WarningLevel"""
    LOW = 3
    CRITICAL = 4
    ACTION = 5


def find_battery(upower):
    for device_path in upower.EnumerateDevices():
        device = Gio.DBusProxy.new_sync(
            upower.get_connection(), Gio.DBusProxyFlags.NONE,
            None, upower.get_name(), device_path,
            'org.freedesktop.UPower.Device')
        if device.get_cached_property('Type').unpack() == DeviceType.BATTERY:
            return device
    else:
        return None


STATE_SIGN = {
    DeviceState.CHARGING: '+',
    DeviceState.FULLY_CHARGED: '',
}


def format_time(seconds):
    minutes = seconds // 60
    hours, minutes = divmod(minutes, 60)
    return f'{hours}:{minutes:02}'


PROPS = ['TimeToEmpty', 'TimeToFull', 'State', 'WarningLevel', 'Percentage']


def print_battery(battery):
    props = dict((p, battery.get_cached_property(p).unpack())
                 for p in PROPS)
    percentage = max(0, min(100, props['Percentage']))

    if props['State'] == DeviceState.FULLY_CHARGED:
        full_text = f'ðŸ”Œ charged'
    elif props['State'] == DeviceState.CHARGING:
        time_full = props['TimeToFull']
        text = format_time(time_full) if time_full else f'{percentage}%'
        full_text = f'ðŸ”Œ {text}'
    else:
        time_empty = props['TimeToEmpty']
        text = format_time(time_empty) if time_empty else f'{percentage}%'
        full_text = f'ðŸ”‹ {text}'

    sign = STATE_SIGN.get(props['State'], '-')
    output = {
        'short_text': f'{sign}{percentage}%',
        'full_text': full_text,
        'urgent': props['WarningLevel'] == DeviceWarningLevel.ACTION,
    }

    # Material Design A700 colors
    if props['WarningLevel'] == DeviceWarningLevel.CRITICAL:
        output['color'] = os.environ.get('warning_color', '#d32f2f')
    elif props['WarningLevel'] == DeviceWarningLevel.LOW:
        output['color'] = os.environ.get('critical_color', '#f57c00')
    elif props['State'] not in [DeviceState.FULLY_CHARGED, DeviceState.CHARGING]:
        # If discharging show battery time in green as long as there's no warning level
        output['color'] = os.environ.get('discharging_colour', '#388e3c')

    json.dump(output, sys.stdout, ensure_ascii=False)
    sys.stdout.write('\n')
    sys.stdout.flush()


def print_if_changed(battery, changed_properties, _invalidated_properties):
    if any(p in PROPS for p in changed_properties.unpack()):
        print_battery(battery)


def main():
    upower = Gio.DBusProxy.new_for_bus_sync(
        Gio.BusType.SYSTEM, Gio.DBusProxyFlags.NONE,
        None, 'org.freedesktop.UPower',
        '/org/freedesktop/UPower',
        'org.freedesktop.UPower'
    )
    battery = find_battery(upower)
    if not battery:
        return

    # Print battery information right after the mainloop started and whenever UPower signals a change
    GLib.timeout_add_seconds(0, lambda: print_battery(battery))
    battery.connect('g-properties-changed', print_if_changed)

    GLib.MainLoop().run()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
