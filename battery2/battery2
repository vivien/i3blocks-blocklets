#!/usr/bin/env python3
#
# Copyright (C) 2016 James Murphy
#               2024 Gregory David
# Licensed under the GPL version 2 only
#
# A battery indicator blocklet script for i3blocks

import os
import re
import sys
from subprocess import CalledProcessError, check_output
from typing import Dict

CONFIG = dict(os.environ)
DISCHARGE_LEVEL = {
    90: CONFIG.get("discharge_90", "\uf240"),
    75: CONFIG.get("discharge_75", "\uf241"),
    50: CONFIG.get("discharge_50", "\uf242"),
    25: CONFIG.get("discharge_25", "\uf243"),
    10: CONFIG.get("discharge_10", "\uf244"),
}
COLOR_LEVEL = {
    90: CONFIG.get("color_90", "#FFFFFF"),
    80: CONFIG.get("color_80", "#FFFF66"),
    70: CONFIG.get("color_70", "#FFFF33"),
    60: CONFIG.get("color_60", "#FFFF00"),
    50: CONFIG.get("color_50", "#FFCC00"),
    40: CONFIG.get("color_40", "#FF9900"),
    30: CONFIG.get("color_30", "#FF6600"),
    20: CONFIG.get("color_20", "#FF3300"),
    10: CONFIG.get("color_10", "#FFFFFF"),
}
WARNING_THRESHOLD = int(CONFIG.get("warning_threshold", 10))
COLOR_CHARGING = CONFIG.get("color_charging", "yellow")
COLOR_NO_BATTERY = CONFIG.get("color_no_battery", "red")


def value_for_level(percent: int, level_mapping: Dict[int, str]):
    """Get symbol associated to a level percentage."""
    levels = sorted(level_mapping.items(), reverse=True)
    for lvl, sym in levels:
        if lvl <= percent:
            return sym
    return levels[-1][1]


def discharge_level(percent: int):
    """Get battery symbol for given level percentage."""
    return value_for_level(percent, DISCHARGE_LEVEL)


def color_level(percent: int):
    """Get color for given level percentage."""
    return value_for_level(percent, COLOR_LEVEL)


def battery2():
    """Main entry point."""
    try:
        status = check_output(["acpi", "-b"], universal_newlines=True)
    except (FileNotFoundError, CalledProcessError):
        status = None

    if not status:
        percentleft = 100
        content = discharge_level(percentleft)
        if status is None:
            content = "no ACPI process"
        fulltext = f"<span color='{COLOR_NO_BATTERY}' font='FontAwesome'>\uf00d {content}</span>"
        shorttext = fulltext
    else:
        # if there is more than one battery in one laptop, the percentage left is
        # available for each battery separately, although state and remaining
        # time for overall block is shown in the status of the first battery
        batteries = status.split("\n")
        state_batteries = []
        commasplitstatus_batteries = []
        percentleft_batteries = []
        time = ""
        for battery in batteries:
            if not battery:
                continue
            state_batteries.append(battery.split(": ")[1].split(", ")[0])
            commasplitstatus = battery.split(", ")
            if not time:
                time = commasplitstatus[-1].strip()
                # check if it matches a time
                time = re.match(r"(\d+):(\d+)", time)
                timeleft = ""
                if time:
                    time = ":".join(time.groups())
                    timeleft = f"({time})"

            p = int(commasplitstatus[1].rstrip("%\n"))
            if p > 0:
                percentleft_batteries.append(p)
            commasplitstatus_batteries.append(commasplitstatus)
        state = state_batteries[0]
        commasplitstatus = commasplitstatus_batteries[0]
        percentleft = 0
        if percentleft_batteries:
            percentleft = int(sum(percentleft_batteries) / len(percentleft_batteries))

        fa_plugged_in = "<span font='FontAwesome'>\uf1e6</span>"
        fa_battery = f"<span font='FontAwesome'>{discharge_level(percentleft)}</span>"

        output = []
        if state == "Discharging":
            output.append(f"{fa_battery}")
        elif state in ["Full", "Not charging"]:
            timeleft = ""
            output.append(f"{fa_plugged_in}")
        elif state == "Charging":
            output.append(
                f"<span color='{COLOR_CHARGING}' font='FontAwesome'>\uf0e7</span>"
            )
            output.append(fa_plugged_in)
        else:
            # stands for unknown status of battery
            timeleft = ""
            output.append("<span font='FontAwesome'>\uf128</span>")
            output.append(fa_battery)

        output.append(f"<span color='{color_level(percentleft)}'>{percentleft}%</span>")
        shorttext = " ".join(output)
        output.append(timeleft)
        fulltext = " ".join(output)

    print(fulltext)
    print(shorttext)

    if percentleft < WARNING_THRESHOLD and state != "Charging":
        check_output(
            [
                "notify-send",
                "-u",
                "critical",
                "-a",
                "i3blocks.battery2",
                "-t",
                "0",
                "Warning",
                f"Battery level <b>{percentleft}%</b> is below <b>{WARNING_THRESHOLD}%</b>, plug power or suspend system",
            ]
        )
        # exit code 33 will turn background red
        return 33
    return 0


if __name__ == "__main__":
    sys.exit(battery2())
